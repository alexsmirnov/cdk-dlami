#!/usr/bin/env bash
# This script is used to configure the instance.
# 1. Format EBS volume on /dev/xvdf, if it does not have file system, and mount it to /work
InstanceID=$(/opt/aws/bin/ec2-metadata -i | cut -d ' ' -f 2)
if [[ "$(file -s -L /dev/xvdf)" == *"/dev/xvdf: data"* ]]; then
  mkfs -t xfs /dev/xvdf
fi
mkdir -p /work
mount /dev/xvdf /work
cp /etc/fstab /etc/fstab.orig
UUID=$(sudo blkid -s UUID -o value /dev/xvdf)
echo "UUID=${UUID} /work xfs defaults,nofail 0 2" | tee -a /etc/fstab
# 2. Configure Jupiter  password, working directory, and kernels
EC2_HOME=/home/ec2-user
# read password sha from Secrets Manager.
# generated by `python -c 'from notebook.auth import passwd; print(passwd("your_password"))'`
# JUPYTER_PASSWORD=$(aws secretsmanager get-secret-value --secre-id ml-secrets --query SecretString --output text | jq -r .juptyer_password)
# 3. Configure Conda to use the /data/envs directory for environments
# 4. create self signed certificate for Jupiter
mkdir -p "$EC2_HOME/ssl"
openssl req -x509 -newkey rsa:4096 -keyout "$EC2_HOME/ssl/key.pem" -out "$EC2_HOME/ssl/cert.pem" -days 730 -nodes \\
  -subj "/C=US/ST=CA/L=Cupertino/O=Internet/OU=./CN=./emailAddress=."
chown -R ec2-user:ec2-user "$EC2_HOME/ssl"
# 5. Create Jupiter systemd service
# 6. Read openAi secret and store to envs file
# 7. Read hugingface secret and login to it